<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>資料結構實作 Sorting</title>
    <link href="/2024/01/10/ds0110/"/>
    <url>/2024/01/10/ds0110/</url>
    
    <content type="html"><![CDATA[<p>記錄我今天複習寫的大便扣<br><a href="https://visualgo.net/en/sorting">視覺化演算法網站</a></p><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p>概念：將第i個插入前面i-1排好的list中，就是要往前比對找出i適合的位置然後插入</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> list[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;            <span class="hljs-keyword">if</span> (list[j + <span class="hljs-number">1</span>] &lt; list[j])&#123;                std::<span class="hljs-built_in">swap</span>(list[j + <span class="hljs-number">1</span>], list[j]);            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)    &#123;        cout &lt;&lt; list[k] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    &#125;    cout &lt;&lt; endl;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;    <span class="hljs-built_in">ins</span>(<span class="hljs-number">5</span>, a);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><p>概念：loop跑一次抓最小的然後往前換，loop的起始點做完一次要+1(因為前面已經排好了)</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sel</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> list[])</span> </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        <span class="hljs-type">int</span> tmp = list[i];        <span class="hljs-type">int</span> index = i;                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n;j++)&#123;            <span class="hljs-keyword">if</span>(list[j]&lt;tmp)&#123;                tmp = list[j];                index = j;            &#125;         &#125;        <span class="hljs-built_in">swap</span>(list[i],list[index]);            &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;        cout &lt;&lt; list[k] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    &#125;    cout &lt;&lt; endl;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;      <span class="hljs-built_in">sel</span>(<span class="hljs-number">5</span>, a);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><p>概念：兩兩比較把小的往前移大的就會在前面排好</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> list[])</span> </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;i--)&#123; <span class="hljs-comment">//這裡要注意是從index n-1開始縮小範圍 不是n</span>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j =<span class="hljs-number">0</span>;j&lt;i;j++)&#123;            <span class="hljs-keyword">if</span>(list[j+<span class="hljs-number">1</span>]&lt;list[j]) <span class="hljs-built_in">swap</span>(list[j+<span class="hljs-number">1</span>],list[j]);        &#125;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;        cout &lt;&lt; list[k] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    &#125;    cout &lt;&lt; endl;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;      <span class="hljs-built_in">bubble</span>(<span class="hljs-number">5</span>, a);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="Quick-Sort-待更新"><a href="#Quick-Sort-待更新" class="headerlink" title="Quick Sort 待更新"></a>Quick Sort 待更新</h2><h2 id="Merge-Sort-待更新"><a href="#Merge-Sort-待更新" class="headerlink" title="Merge Sort 待更新"></a>Merge Sort 待更新</h2><h2 id="Heap-Sort-待更新"><a href="#Heap-Sort-待更新" class="headerlink" title="Heap Sort 待更新"></a>Heap Sort 待更新</h2>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DS</tag>
      
      <tag>AL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>測試文章</title>
    <link href="/2024/01/09/test/"/>
    <url>/2024/01/09/test/</url>
    
    <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><p>hexo clean<br>hexo doply</p><p>hexo s –draft </p><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style>      <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-b5714680" role="button" aria-expanded="false" aria-controls="collapse-b5714680">        <div class="fold-arrow">▶</div>XXXX      </div>      <div class="fold-collapse collapse" id="collapse-b5714680">        <div class="fold-content">          <p>需要折叠的一段内容，支持 markdown</p>        </div>      </div>    </div><p><span class="label label-primary">Label</span><br><span class="label label-primary">aaaaaaaæLAbel</span></p><div class="twopeople">    <div class="container" style="height:200px;">        <canvas class="illo" width="800" height="800" style="max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;"></canvas>    </div>    <script src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople1.js"></script>    <script src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/zdog.dist.js"></script>    <script id="rendered-js" src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople.js"></script>    <style>        .twopeople{            margin: 0;            align-items: center;            justify-content: center;            text-align: center;        }        canvas {            display: block;            margin: 0 auto;            cursor: move;        }    </style></div><p>#test</p><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><script type="text/javascript" src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/sakura.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
